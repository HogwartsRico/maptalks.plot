{"version":3,"file":"maptalks.plot.js","sources":["../src/core/PlotTypes.js","../src/Constants.js","../src/geometry/Polyline/Curve.js","../src/geometry/Polyline/Polyline.js","../src/geometry/Polyline/FreeLine.js","../src/geometry/index.js","../src/utils/utils.js","../src/core/PlotDraw.js"],"sourcesContent":["/**\n * Created by FDD on 2017/5/20.\n */\nconst TextArea = 'TextArea' // 文本标绘（特殊）\nconst ARC = 'Arc'\nconst CURVE = 'Curve'\nconst GATHERING_PLACE = 'GatheringPlace'\nconst POLYLINE = 'Polyline'\nconst FREE_LINE = 'FreeLine'\nconst POINT = 'Point'\nconst PENNANT = 'Pennant'\nconst RECTANGLE = 'RectAngle'\nconst CIRCLE = 'Circle'\nconst ELLIPSE = 'Ellipse'\nconst LUNE = 'Lune'\nconst SECTOR = 'Sector'\nconst CLOSED_CURVE = 'ClosedCurve'\nconst POLYGON = 'Polygon'\nconst FREE_POLYGON = 'FreePolygon'\nconst ATTACK_ARROW = 'AttackArrow'\nconst DOUBLE_ARROW = 'DoubleArrow'\nconst STRAIGHT_ARROW = 'StraightArrow'\nconst FINE_ARROW = 'FineArrow'\nconst ASSAULT_DIRECTION = 'AssaultDirection'\nconst TAILED_ATTACK_ARROW = 'TailedAttackArrow'\nconst SQUAD_COMBAT = 'SquadCombat'\nconst TAILED_SQUAD_COMBAT = 'TailedSquadCombat'\nconst RECTFLAG = 'RectFlag'\nconst TRIANGLEFLAG = 'TriangleFlag'\nconst CURVEFLAG = 'CurveFlag'\nexport {\n  TextArea,\n  ARC,\n  CURVE,\n  GATHERING_PLACE,\n  POLYLINE,\n  FREE_LINE,\n  POINT,\n  PENNANT,\n  RECTANGLE,\n  CIRCLE,\n  ELLIPSE,\n  LUNE,\n  SECTOR,\n  CLOSED_CURVE,\n  POLYGON,\n  FREE_POLYGON,\n  ATTACK_ARROW,\n  DOUBLE_ARROW,\n  STRAIGHT_ARROW,\n  FINE_ARROW,\n  ASSAULT_DIRECTION,\n  TAILED_SQUAD_COMBAT,\n  TAILED_ATTACK_ARROW,\n  SQUAD_COMBAT,\n  RECTFLAG,\n  TRIANGLEFLAG,\n  CURVEFLAG\n}\n","/**\n * Created by FDD on 2017/5/22.\n * @desc 常用变量\n */\nexport const FITTING_COUNT = 100\nexport const HALF_PI = Math.PI / 2\nexport const ZERO_TOLERANCE = 0.0001\nexport const TWO_PI = Math.PI * 2\nexport const BASE_LAYERNAME = 'maptalks-plot-vector-layer' // 矢量图层名，（唯一标识）\nexport const BASE_HELP_CONTROL_POINT_ID = 'plot-helper-control-point-div' // 控制点要素的基类id\nexport const BASE_HELP_HIDDEN = 'plot-helper-hidden-div' // 父类隐藏容器\nexport const INTERNAL_LAYER_PREFIX = '_maptalks__internal_layer_'\nexport const DEF_TEXT_STYEL = { // 默认文本框样式\n  backgroundColor: '#fff',\n  borderRadius: '2px',\n  boxSizing: 'border-box',\n  border: '3px solid rgba(255, 0, 0, 1)',\n  fontFamily: 'Helvetica Neue,Helvetica,PingFang SC,Hiragino Sans GB,Microsoft YaHei,Noto Sans CJK SC,WenQuanYi Micro Hei,Arial,sans-serif',\n  color: '#010500',\n  fontWeight: 400,\n  padding: '10px',\n  fontStretch: 'normal'\n}\n","/**\n * Created by FDD on 2017/12/10.\n * @desc 标绘曲线算法\n */\n\nimport * as maptalks from 'maptalks'\nconst Canvas2d = maptalks.Canvas\nconst options = {\n  'arcDegree': 90\n}\nclass Curve extends maptalks.LineString {\n  _arc (ctx, points, lineOpacity) {\n    const degree = this.options['arcDegree'] * Math.PI / 180\n    for (let i = 1, l = points.length; i < l; i++) {\n      Canvas2d._arcBetween(ctx, points[i - 1], points[i], degree)\n      Canvas2d._stroke(ctx, lineOpacity)\n    }\n  }\n\n  _quadraticCurve (ctx, points) {\n    if (points.length <= 2) {\n      Canvas2d._path(ctx, points)\n      return\n    }\n    Canvas2d.quadraticCurve(ctx, points)\n  }\n\n  _bezierCurve (ctx, points) {\n    if (points.length <= 3) {\n      Canvas2d._path(ctx, points)\n      return\n    }\n    let i, l\n    for (i = 1, l = points.length; i + 2 < l; i += 3) {\n      ctx.bezierCurveTo(points[i].x, points[i].y, points[i + 1].x, points[i + 1].y, points[i + 2].x, points[i + 2].y)\n    }\n    if (i < l) {\n      for (; i < l; i++) {\n        ctx.lineTo(points[i].x, points[i].y)\n      }\n    }\n  }\n\n  _toJSON (options) {\n    return {\n      'feature': this.toGeoJSON(options),\n      'subType': 'Curve'\n    }\n  }\n\n  // paint method on canvas\n  _paintOn (ctx, points, lineOpacity) {\n    ctx.beginPath()\n    this._arc(ctx, points, lineOpacity)\n    Canvas2d._stroke(ctx, lineOpacity)\n    this._paintArrow(ctx, points, lineOpacity)\n  }\n\n  static fromJSON (json) {\n    const feature = json['feature']\n    const arc = new Curve(feature['geometry']['coordinates'], json['options'])\n    arc.setProperties(feature['properties'])\n    return arc\n  }\n}\nCurve.registerJSONType('Curve')\nCurve.mergeOptions(options)\n\nexport default Curve\n","import * as maptalks from 'maptalks'\nconst Coordinate = maptalks.Coordinate\nconst options = {\n  'arrowStyle': null,\n  'arrowPlacement': 'vertex-last', // vertex-first, vertex-last, vertex-firstlast, point\n  'clipToPaint': true\n}\n\nclass Polyline extends maptalks.LineString {\n  constructor (coordinates, options = {}) {\n    super(options)\n    this.type = 'Polyline'\n    if (coordinates) {\n      this.setCoordinates(coordinates)\n    }\n  }\n\n  _exportGeoJSONGeometry () {\n    const points = this.getCoordinates()\n    const coordinates = Coordinate.toNumberArrays(points)\n    return {\n      'type': 'LineString',\n      'coordinates': coordinates\n    }\n  }\n\n  _toJSON (options) {\n    return {\n      'feature': this.toGeoJSON(options)\n    }\n  }\n}\n\nPolyline.mergeOptions(options)\n\nPolyline.registerJSONType('Polyline')\n\nexport default Polyline\n","/**\r\n * Created by FDD on 2017/12/12.\r\n * @desc 自由线\r\n * @Inherits maptalks.LineString\r\n */\r\nimport * as maptalks from 'maptalks'\r\nconst Coordinate = maptalks.Coordinate\r\nconst options = {\r\n  'arrowStyle': null,\r\n  'arrowPlacement': 'vertex-last', // vertex-first, vertex-last, vertex-firstlast, point\r\n  'clipToPaint': true\r\n}\r\n\r\nclass FreeLine extends maptalks.LineString {\r\n  constructor (coordinates, options = {}) {\r\n    super(options)\r\n    this.type = 'FreeLine'\r\n    if (coordinates) {\r\n      this.setCoordinates(coordinates)\r\n    }\r\n  }\r\n\r\n  _exportGeoJSONGeometry () {\r\n    const points = this.getCoordinates()\r\n    const coordinates = Coordinate.toNumberArrays(points)\r\n    return {\r\n      'type': 'LineString',\r\n      'coordinates': coordinates\r\n    }\r\n  }\r\n\r\n  _toJSON (options) {\r\n    return {\r\n      'feature': this.toGeoJSON(options)\r\n    }\r\n  }\r\n}\r\n\r\nFreeLine.mergeOptions(options)\r\n\r\nFreeLine.registerJSONType('FreeLine')\r\n\r\nexport default FreeLine\r\n","/**\n * Created by FDD on 2017/5/20.\n * @desc 标绘图形构造类\n */\n\nimport Curve from './Polyline/Curve'\nimport Polyline from './Polyline/Polyline'\nimport FreeLine from './Polyline/FreeLine'\nimport * as PlotTypes from '../core/PlotTypes'\nconst RegisterModes = {}\nRegisterModes[PlotTypes.CURVE] = {\n  'action': ['click', 'click', 'dbclick'],\n  'create': function (path) {\n    return new Curve(path)\n  },\n  'update': function (path, geometry) {\n    geometry.setCoordinates(path)\n  },\n  'generate': function (geometry) {\n    return geometry\n  }\n}\nRegisterModes[PlotTypes.POLYLINE] = {\n  'action': ['click', 'mousemove', 'dbclick'],\n  'create': function (path) {\n    return new Polyline(path)\n  },\n  'update': function (path, geometry) {\n    geometry.setCoordinates(path)\n  },\n  'generate': function (geometry) {\n    return geometry\n  }\n}\nRegisterModes[PlotTypes.FREE_LINE] = {\n  'action': ['mousedown', 'drag', 'mouseup'],\n  'create': function (path) {\n    return new FreeLine(path)\n  },\n  'update': function (path, geometry) {\n    geometry.setCoordinates(path)\n  },\n  'generate': function (geometry) {\n    return geometry\n  }\n}\n\nexport default RegisterModes\n","import * as Constants from '../Constants'\n/**\n * 计算两个坐标之间的距离\n * @param pnt1\n * @param pnt2\n * @returns {number}\n * @constructor\n */\nexport const MathDistance = (pnt1, pnt2) => {\n  return (Math.sqrt(Math.pow((pnt1[0] - pnt2[0]), 2) + Math.pow((pnt1[1] - pnt2[1]), 2)))\n}\n\n/**\n * 计算点集合的总距离\n * @param points\n * @returns {number}\n */\nexport const wholeDistance = (points) => {\n  let distance = 0\n  if (points && Array.isArray(points) && points.length > 0) {\n    points.forEach((item, index) => {\n      if (index < points.length - 1) {\n        distance += (MathDistance(item, points[index + 1]))\n      }\n    })\n  }\n  return distance\n}\n/**\n * 获取基础长度\n * @param points\n * @returns {number}\n */\nexport const getBaseLength = (points) => {\n  return Math.pow(wholeDistance(points), 0.99)\n}\n\n/**\n * 求取两个坐标的中间值\n * @param point1\n * @param point2\n * @returns {[*,*]}\n * @constructor\n */\nexport const Mid = (point1, point2) => {\n  return [(point1[0] + point2[0]) / 2, (point1[1] + point2[1]) / 2]\n}\n\n/**\n * 通过三个点确定一个圆的中心点\n * @param point1\n * @param point2\n * @param point3\n */\nexport const getCircleCenterOfThreePoints = (point1, point2, point3) => {\n  let pntA = [(point1[0] + point2[0]) / 2, (point1[1] + point2[1]) / 2]\n  let pntB = [pntA[0] - point1[1] + point2[1], pntA[1] + point1[0] - point2[0]]\n  let pntC = [(point1[0] + point3[0]) / 2, (point1[1] + point3[1]) / 2]\n  let pntD = [pntC[0] - point1[1] + point3[1], pntC[1] + point1[0] - point3[0]]\n  return getIntersectPoint(pntA, pntB, pntC, pntD)\n}\n\n/**\n * 获取交集的点\n * @param pntA\n * @param pntB\n * @param pntC\n * @param pntD\n * @returns {[*,*]}\n */\nexport const getIntersectPoint = (pntA, pntB, pntC, pntD) => {\n  if (pntA[1] === pntB[1]) {\n    let f = (pntD[0] - pntC[0]) / (pntD[1] - pntC[1])\n    let x = f * (pntA[1] - pntC[1]) + pntC[0]\n    let y = pntA[1]\n    return [x, y]\n  }\n  if (pntC[1] === pntD[1]) {\n    let e = (pntB[0] - pntA[0]) / (pntB[1] - pntA[1])\n    let x = e * (pntC[1] - pntA[1]) + pntA[0]\n    let y = pntC[1]\n    return [x, y]\n  }\n  let e = (pntB[0] - pntA[0]) / (pntB[1] - pntA[1])\n  let f = (pntD[0] - pntC[0]) / (pntD[1] - pntC[1])\n  let y = (e * pntA[1] - pntA[0] - f * pntC[1] + pntC[0]) / (e - f)\n  let x = e * y - e * pntA[1] + pntA[0]\n  return [x, y]\n}\n\n/**\n * 获取方位角（地平经度）\n * @param startPoint\n * @param endPoint\n * @returns {*}\n */\nexport const getAzimuth = (startPoint, endPoint) => {\n  let azimuth\n  let angle = Math.asin(Math.abs(endPoint[1] - startPoint[1]) / (MathDistance(startPoint, endPoint)))\n  if (endPoint[1] >= startPoint[1] && endPoint[0] >= startPoint[0]) {\n    azimuth = angle + Math.PI\n  } else if (endPoint[1] >= startPoint[1] && endPoint[0] < startPoint[0]) {\n    azimuth = Math.PI * 2 - angle\n  } else if (endPoint[1] < startPoint[1] && endPoint[0] < startPoint[0]) {\n    azimuth = angle\n  } else if (endPoint[1] < startPoint[1] && endPoint[0] >= startPoint[0]) {\n    azimuth = Math.PI - angle\n  }\n  return azimuth\n}\n\n/**\n * 通过三个点获取方位角\n * @param pntA\n * @param pntB\n * @param pntC\n * @returns {number}\n */\nexport const getAngleOfThreePoints = (pntA, pntB, pntC) => {\n  let angle = getAzimuth(pntB, pntA) - getAzimuth(pntB, pntC)\n  return ((angle < 0) ? (angle + Math.PI * 2) : angle)\n}\n\n/**\n * 判断是否是顺时针\n * @param pnt1\n * @param pnt2\n * @param pnt3\n * @returns {boolean}\n */\nexport const isClockWise = (pnt1, pnt2, pnt3) => {\n  return ((pnt3[1] - pnt1[1]) * (pnt2[0] - pnt1[0]) > (pnt2[1] - pnt1[1]) * (pnt3[0] - pnt1[0]))\n}\n\n/**\n * 获取线上的点\n * @param t\n * @param startPnt\n * @param endPnt\n * @returns {[*,*]}\n */\nexport const getPointOnLine = (t, startPnt, endPnt) => {\n  let x = startPnt[0] + (t * (endPnt[0] - startPnt[0]))\n  let y = startPnt[1] + (t * (endPnt[1] - startPnt[1]))\n  return [x, y]\n}\n\n/**\n * 获取立方值\n * @param t\n * @param startPnt\n * @param cPnt1\n * @param cPnt2\n * @param endPnt\n * @returns {[*,*]}\n */\nexport const getCubicValue = (t, startPnt, cPnt1, cPnt2, endPnt) => {\n  t = Math.max(Math.min(t, 1), 0)\n  let [tp, t2] = [(1 - t), (t * t)]\n  let t3 = t2 * t\n  let tp2 = tp * tp\n  let tp3 = tp2 * tp\n  let x = (tp3 * startPnt[0]) + (3 * tp2 * t * cPnt1[0]) + (3 * tp * t2 * cPnt2[0]) + (t3 * endPnt[0])\n  let y = (tp3 * startPnt[1]) + (3 * tp2 * t * cPnt1[1]) + (3 * tp * t2 * cPnt2[1]) + (t3 * endPnt[1])\n  return [x, y]\n}\n\n/**\n * 根据起止点和旋转方向求取第三个点\n * @param startPnt\n * @param endPnt\n * @param angle\n * @param distance\n * @param clockWise\n * @returns {[*,*]}\n */\nexport const getThirdPoint = (startPnt, endPnt, angle, distance, clockWise) => {\n  let azimuth = getAzimuth(startPnt, endPnt)\n  let alpha = clockWise ? (azimuth + angle) : (azimuth - angle)\n  let dx = distance * Math.cos(alpha)\n  let dy = distance * Math.sin(alpha)\n  return ([endPnt[0] + dx, endPnt[1] + dy])\n}\n\n/**\n * 插值弓形线段点\n * @param center\n * @param radius\n * @param startAngle\n * @param endAngle\n * @returns {null}\n */\nexport const getArcPoints = (center, radius, startAngle, endAngle) => {\n  let [x, y, pnts, angleDiff] = [null, null, [], (endAngle - startAngle)]\n  angleDiff = ((angleDiff < 0) ? (angleDiff + (Math.PI * 2)) : angleDiff)\n  for (let i = 0; i <= 100; i++) {\n    let angle = startAngle + angleDiff * i / 100\n    x = center[0] + radius * Math.cos(angle)\n    y = center[1] + radius * Math.sin(angle)\n    pnts.push([x, y])\n  }\n  return pnts\n}\n\n/**\n * getBisectorNormals\n * @param t\n * @param pnt1\n * @param pnt2\n * @param pnt3\n * @returns {[*,*]}\n */\nexport const getBisectorNormals = (t, pnt1, pnt2, pnt3) => {\n  let normal = getNormal(pnt1, pnt2, pnt3)\n  let [bisectorNormalRight, bisectorNormalLeft, dt, x, y] = [null, null, null, null, null]\n  let dist = Math.sqrt(normal[0] * normal[0] + normal[1] * normal[1])\n  let uX = normal[0] / dist\n  let uY = normal[1] / dist\n  let d1 = MathDistance(pnt1, pnt2)\n  let d2 = MathDistance(pnt2, pnt3)\n  if (dist > Constants.ZERO_TOLERANCE) {\n    if (isClockWise(pnt1, pnt2, pnt3)) {\n      dt = t * d1\n      x = pnt2[0] - dt * uY\n      y = pnt2[1] + dt * uX\n      bisectorNormalRight = [x, y]\n      dt = t * d2\n      x = pnt2[0] + dt * uY\n      y = pnt2[1] - dt * uX\n      bisectorNormalLeft = [x, y]\n    } else {\n      dt = t * d1\n      x = pnt2[0] + dt * uY\n      y = pnt2[1] - dt * uX\n      bisectorNormalRight = [x, y]\n      dt = t * d2\n      x = pnt2[0] - dt * uY\n      y = pnt2[1] + dt * uX\n      bisectorNormalLeft = [x, y]\n    }\n  } else {\n    x = pnt2[0] + t * (pnt1[0] - pnt2[0])\n    y = pnt2[1] + t * (pnt1[1] - pnt2[1])\n    bisectorNormalRight = [x, y]\n    x = pnt2[0] + t * (pnt3[0] - pnt2[0])\n    y = pnt2[1] + t * (pnt3[1] - pnt2[1])\n    bisectorNormalLeft = [x, y]\n  }\n  return [bisectorNormalRight, bisectorNormalLeft]\n}\n\n/**\n * 获取默认三点的内切圆\n * @param pnt1\n * @param pnt2\n * @param pnt3\n * @returns {[*,*]}\n */\nexport const getNormal = (pnt1, pnt2, pnt3) => {\n  let dX1 = pnt1[0] - pnt2[0]\n  let dY1 = pnt1[1] - pnt2[1]\n  let d1 = Math.sqrt(dX1 * dX1 + dY1 * dY1)\n  dX1 /= d1\n  dY1 /= d1\n  let dX2 = pnt3[0] - pnt2[0]\n  let dY2 = pnt3[1] - pnt2[1]\n  let d2 = Math.sqrt(dX2 * dX2 + dY2 * dY2)\n  dX2 /= d2\n  dY2 /= d2\n  let uX = dX1 + dX2\n  let uY = dY1 + dY2\n  return [uX, uY]\n}\n\n/**\n * 获取左边控制点\n * @param controlPoints\n * @returns {[*,*]}\n */\nexport const getLeftMostControlPoint = (controlPoints, t) => {\n  let [pnt1, pnt2, pnt3, controlX, controlY] = [controlPoints[0], controlPoints[1], controlPoints[2], null, null]\n  let pnts = getBisectorNormals(0, pnt1, pnt2, pnt3)\n  let normalRight = pnts[0]\n  let normal = getNormal(pnt1, pnt2, pnt3)\n  let dist = Math.sqrt(normal[0] * normal[0] + normal[1] * normal[1])\n  if (dist > Constants.ZERO_TOLERANCE) {\n    let mid = Mid(pnt1, pnt2)\n    let pX = pnt1[0] - mid[0]\n    let pY = pnt1[1] - mid[1]\n    let d1 = MathDistance(pnt1, pnt2)\n    let n = 2.0 / d1\n    let nX = -n * pY\n    let nY = n * pX\n    let a11 = nX * nX - nY * nY\n    let a12 = 2 * nX * nY\n    let a22 = nY * nY - nX * nX\n    let dX = normalRight[0] - mid[0]\n    let dY = normalRight[1] - mid[1]\n    controlX = mid[0] + a11 * dX + a12 * dY\n    controlY = mid[1] + a12 * dX + a22 * dY\n  } else {\n    controlX = pnt1[0] + t * (pnt2[0] - pnt1[0])\n    controlY = pnt1[1] + t * (pnt2[1] - pnt1[1])\n  }\n  return [controlX, controlY]\n}\n\n/**\n * 获取右边控制点\n * @param controlPoints\n * @param t\n * @returns {[*,*]}\n */\nexport const getRightMostControlPoint = (controlPoints, t) => {\n  let count = controlPoints.length\n  let pnt1 = controlPoints[count - 3]\n  let pnt2 = controlPoints[count - 2]\n  let pnt3 = controlPoints[count - 1]\n  let pnts = getBisectorNormals(0, pnt1, pnt2, pnt3)\n  let normalLeft = pnts[1]\n  let normal = getNormal(pnt1, pnt2, pnt3)\n  let dist = Math.sqrt(normal[0] * normal[0] + normal[1] * normal[1])\n  let [controlX, controlY] = [null, null]\n  if (dist > Constants.ZERO_TOLERANCE) {\n    let mid = Mid(pnt2, pnt3)\n    let pX = pnt3[0] - mid[0]\n    let pY = pnt3[1] - mid[1]\n    let d1 = MathDistance(pnt2, pnt3)\n    let n = 2.0 / d1\n    let nX = -n * pY\n    let nY = n * pX\n    let a11 = nX * nX - nY * nY\n    let a12 = 2 * nX * nY\n    let a22 = nY * nY - nX * nX\n    let dX = normalLeft[0] - mid[0]\n    let dY = normalLeft[1] - mid[1]\n    controlX = mid[0] + a11 * dX + a12 * dY\n    controlY = mid[1] + a12 * dX + a22 * dY\n  } else {\n    controlX = pnt3[0] + t * (pnt2[0] - pnt3[0])\n    controlY = pnt3[1] + t * (pnt2[1] - pnt3[1])\n  }\n  return [controlX, controlY]\n}\n\n/**\n * 插值曲线点\n * @param t\n * @param controlPoints\n * @returns {null}\n */\nexport const getCurvePoints = (t, controlPoints) => {\n  let leftControl = getLeftMostControlPoint(controlPoints, t)\n  let [pnt1, pnt2, pnt3, normals, points] = [null, null, null, [leftControl], []]\n  for (let i = 0; i < controlPoints.length - 2; i++) {\n    [pnt1, pnt2, pnt3] = [controlPoints[i], controlPoints[i + 1], controlPoints[i + 2]]\n    let normalPoints = getBisectorNormals(t, pnt1, pnt2, pnt3)\n    normals = normals.concat(normalPoints)\n  }\n  let rightControl = getRightMostControlPoint(controlPoints, t)\n  if (rightControl) {\n    normals.push(rightControl)\n  }\n  for (let i = 0; i < controlPoints.length - 1; i++) {\n    pnt1 = controlPoints[i]\n    pnt2 = controlPoints[i + 1]\n    points.push(pnt1)\n    for (let t = 0; t < Constants.FITTING_COUNT; t++) {\n      let pnt = getCubicValue(t / Constants.FITTING_COUNT, pnt1, normals[i * 2], normals[i * 2 + 1], pnt2)\n      points.push(pnt)\n    }\n    points.push(pnt2)\n  }\n  return points\n}\n\n/**\n * 贝塞尔曲线\n * @param points\n * @returns {*}\n */\nexport const getBezierPoints = function (points) {\n  if (points.length <= 2) {\n    return points\n  } else {\n    let bezierPoints = []\n    let n = points.length - 1\n    for (let t = 0; t <= 1; t += 0.01) {\n      let [x, y] = [0, 0]\n      for (let index = 0; index <= n; index++) {\n        let factor = getBinomialFactor(n, index)\n        let a = Math.pow(t, index)\n        let b = Math.pow((1 - t), (n - index))\n        x += factor * a * b * points[index][0]\n        y += factor * a * b * points[index][1]\n      }\n      bezierPoints.push([x, y])\n    }\n    bezierPoints.push(points[n])\n    return bezierPoints\n  }\n}\n\n/**\n * 获取阶乘数据\n * @param n\n * @returns {number}\n */\nexport const getFactorial = (n) => {\n  let result = 1\n  switch (n) {\n    case (n <= 1):\n      result = 1\n      break\n    case (n === 2):\n      result = 2\n      break\n    case (n === 3):\n      result = 6\n      break\n    case (n === 24):\n      result = 24\n      break\n    case (n === 5):\n      result = 120\n      break\n    default:\n      for (let i = 1; i <= n; i++) {\n        result *= i\n      }\n      break\n  }\n  return result\n}\n\n/**\n * 获取二项分布\n * @param n\n * @param index\n * @returns {number}\n */\nexport const getBinomialFactor = (n, index) => {\n  return (getFactorial(n) / (getFactorial(index) * getFactorial(n - index)))\n}\n\n/**\n * 插值线性点\n * @param points\n * @returns {*}\n */\nexport const getQBSplinePoints = points => {\n  if (points.length <= 2) {\n    return points\n  } else {\n    let [n, bSplinePoints] = [2, []]\n    let m = points.length - n - 1\n    bSplinePoints.push(points[0])\n    for (let i = 0; i <= m; i++) {\n      for (let t = 0; t <= 1; t += 0.05) {\n        let [x, y] = [0, 0]\n        for (let k = 0; k <= n; k++) {\n          let factor = getQuadricBSplineFactor(k, t)\n          x += factor * points[i + k][0]\n          y += factor * points[i + k][1]\n        }\n        bSplinePoints.push([x, y])\n      }\n    }\n    bSplinePoints.push(points[points.length - 1])\n    return bSplinePoints\n  }\n}\n\n/**\n * 得到二次线性因子\n * @param k\n * @param t\n * @returns {number}\n */\nexport const getQuadricBSplineFactor = (k, t) => {\n  let res = 0\n  if (k === 0) {\n    res = Math.pow(t - 1, 2) / 2\n  } else if (k === 1) {\n    res = (-2 * Math.pow(t, 2) + 2 * t + 1) / 2\n  } else if (k === 2) {\n    res = Math.pow(t, 2) / 2\n  }\n  return res\n}\n\n/**\n * 判断是否为对象\n * @param value\n * @returns {boolean}\n */\nexport const isObject = value => {\n  const type = typeof value\n  return value !== null && (type === 'object' || type === 'function')\n}\n\nexport const merge = (a, b) => {\n  for (const key in b) {\n    if (isObject(b[key]) && isObject(a[key])) {\n      merge(a[key], b[key])\n    } else {\n      a[key] = b[key]\n    }\n  }\n  return a\n}\n","/**\n * Created by FDD on 2017/12/10.\n * @desc PlotDraw\n */\n\nimport * as maptalks from 'maptalks'\nimport {BASE_LAYERNAME} from '../Constants'\nimport RegisterModes from '../geometry'\nimport { merge } from '../utils/utils'\nconst _options = {\n  'symbol': {\n    'lineColor': '#000',\n    'lineWidth': 2,\n    'lineOpacity': 1,\n    'polygonFill': '#fff',\n    'polygonOpacity': 0.3\n  },\n  'doubleClickZoom': false,\n  'mode': null,\n  'once': false,\n  'ignoreMouseleave': true\n}\nconst registeredMode = {}\nconst stopPropagation = function (e) {\n  if (e.stopPropagation) {\n    e.stopPropagation()\n  } else {\n    e.cancelBubble = true\n  }\n  return this\n}\nclass PlotDraw extends maptalks.MapTool {\n  constructor (options = {}) {\n    const $options = merge(_options, options)\n    super($options)\n    this.options = $options\n    if (this.options['mode']) this._getRegisterMode()\n\n    /**\n     * 创建图层名称\n     * @type {string}\n     */\n    this.layerName = ((this.options && this.options['layerName']) ? this.options['layerName'] : BASE_LAYERNAME)\n\n    /**\n     * 创建标绘要素图层\n     * @type {*}\n     */\n    this.drawLayer = null\n  }\n\n  /**\n   * 获取注册过的标绘类型\n   * @returns {Object}\n   * @private\n   */\n  _getRegisterMode () {\n    const mode = this.getMode()\n    const registerMode = PlotDraw.getRegisterMode(mode)\n    if (!registerMode) {\n      throw new Error(mode + ' is not a valid type of PlotDraw.')\n    }\n    return registerMode\n  }\n\n  /**\n   * 激活对应工具\n   * @param mode\n   * @returns {PlotDraw}\n   */\n  setMode (mode) {\n    this._clearStage()\n    this._switchEvents('off') // _prototype\n    this.options['mode'] = mode\n    this._getRegisterMode() // cheack type\n    if (this.isEnabled()) {\n      this._switchEvents('on')\n      this._deactiveMapInteractions()\n    }\n    return this\n  }\n\n  /**\n   * 获取当前激活的标绘工具\n   * @return {String} mode\n   */\n  getMode () {\n    if (this.options['mode']) {\n      return this.options['mode'].toLowerCase()\n    }\n    return null\n  }\n\n  /**\n   * 取消激活地图交互并保存\n   */\n  _deactiveMapInteractions () {\n    const map = this.getMap()\n    this._mapDoubleClickZoom = map.options['doubleClickZoom']\n    map.config({\n      'doubleClickZoom': this.options['doubleClickZoom']\n    })\n    const action = this._getRegisterMode()['action']\n    if (action.indexOf('drag') > -1) {\n      const map = this.getMap()\n      this._mapDraggable = map.options['draggable']\n      map.config({\n        'draggable': false\n      })\n    }\n  }\n\n  /**\n   * 激活地图原有交互\n   * @private\n   */\n  _activateMapInteractions () {\n    const map = this.getMap()\n    map.config({\n      'doubleClickZoom': this._mapDoubleClickZoom\n    })\n    if (this._mapDraggable) {\n      map.config('draggable', this._mapDraggable)\n    }\n    delete this._mapDraggable\n    delete this._mapDoubleClickZoom\n  }\n\n  /**\n   * get register events\n   * @returns {*}\n   */\n  getEvents () {\n    const action = this._getRegisterMode()['action']\n    if (Array.isArray(action)) {\n      return {\n        'click': this._firstClickHandler,\n        'mousemove': this._mouseMoveHandler,\n        'dblclick': this._doubleClickHandler\n      }\n    }\n    return null\n  }\n\n  _firstClickHandler (event) {\n    const registerMode = this._getRegisterMode()\n    const coordinate = event['coordinate']\n    const symbol = this.getSymbol()\n    if (!this._geometry) {\n      this._clickCoords = [coordinate]\n      this._geometry = registerMode['create'](this._clickCoords, event)\n      if (symbol) {\n        this._geometry.setSymbol(symbol)\n      }\n      this._addGeometryToStage(this._geometry)\n      this._fireEvent('drawstart', event)\n    } else {\n      if (!(this._historyPointer === null)) {\n        this._clickCoords = this._clickCoords.slice(0, this._historyPointer)\n      }\n      this._clickCoords.push(coordinate)\n      this._historyPointer = this._clickCoords.length\n      registerMode['update'](this._clickCoords, this._geometry, event)\n      this._fireEvent('drawvertex', event)\n    }\n  }\n\n  /**\n   * 鼠标移动事件处理\n   * @param event\n   * @private\n   */\n  _mouseMoveHandler (event) {\n    const map = this.getMap()\n    if (!this._geometry || !map || map.isInteracting()) {\n      return\n    }\n    const containerPoint = this._getMouseContainerPoint(event)\n    if (!this._isValidContainerPoint(containerPoint)) {\n      return\n    }\n    const coordinate = event['coordinate']\n    const registerMode = this._getRegisterMode()\n    const path = this._clickCoords.slice(0, this._historyPointer)\n    if (path && path.length > 0 && coordinate.equals(path[path.length - 1])) {\n      return\n    }\n    registerMode['update'](path.concat([coordinate]), this._geometry, event)\n    this._fireEvent('mousemove', event)\n  }\n\n  /**\n   * 双击事件处理\n   * @param event\n   * @private\n   */\n  _doubleClickHandler (event) {\n    this.endDraw(event)\n  }\n\n  _getMouseContainerPoint (event) {\n    const action = this._getRegisterMode()['action']\n    if (action.indexOf('drag') > -1) {\n      stopPropagation(event['domEvent'])\n    }\n    return event['containerPoint']\n  }\n\n  _isValidContainerPoint (containerPoint) {\n    const mapSize = this._map.getSize()\n    const w = mapSize['width']\n    const h = mapSize['height']\n    if (containerPoint.x < 0 || containerPoint.y < 0) {\n      return false\n    } else if (containerPoint.x > w || containerPoint.y > h) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * 清空缓存\n   * @private\n   */\n  _clearStage () {\n    this._getDrawLayer(this.layerName).clear()\n    if (this._geometry) {\n      this._geometry.remove()\n      delete this._geometry\n    }\n    delete this._clickCoords\n  }\n\n  /**\n   * 添加geometry到图层\n   * @param geometry\n   * @private\n   */\n  _addGeometryToStage (geometry) {\n    this._getDrawLayer(this.layerName).addGeometry(geometry)\n  }\n\n  /**\n   * Set draw tool's symbol\n   * @param {Object} symbol - symbol set\n   * @returns {DrawTool} this\n   */\n  setSymbol (symbol) {\n    if (!symbol) {\n      return this\n    }\n    this.options['symbol'] = symbol\n    if (this._geometry) {\n      this._geometry.setSymbol(symbol)\n    }\n    return this\n  }\n\n  /**\n   * Get symbol of the draw tool\n   * @return {Object} symbol\n   */\n  getSymbol () {\n    const symbol = this.options['symbol']\n    if (symbol) {\n      return maptalks.Util.extendSymbol(symbol)\n    } else {\n      return maptalks.Util.extendSymbol(this.options['symbol'])\n    }\n  }\n\n  /**\n   * 创建矢量图层\n   * @param layerName\n   * @returns {*}\n   * @private\n   */\n  _getDrawLayer (layerName) {\n    let drawToolLayer = this._map.getLayer(layerName)\n    if (!drawToolLayer) {\n      drawToolLayer = new maptalks.VectorLayer(layerName, {\n        'enableSimplify': false\n      })\n      this._map.addLayer(drawToolLayer)\n    }\n    return drawToolLayer\n  }\n\n  /**\n   * fire event\n   * @param eventName\n   * @param param\n   * @private\n   */\n  _fireEvent (eventName, param = {}) {\n    if (this._geometry) {\n      param['geometry'] = this._getRegisterMode()['generate'](this._geometry).copy()\n    }\n    maptalks.MapTool.prototype._fireEvent.call(this, eventName, param)\n  }\n\n  /**\n   * when layer add, check register mode\n   */\n  onAdd () {\n    this._getRegisterMode()\n  }\n\n  /**\n   * handle enAble event\n   * @returns {PlotDraw}\n   */\n  onEnable () {\n    this._deactiveMapInteractions()\n    this.drawLayer = this._getDrawLayer(this.layerName)\n    this._clearStage()\n    this._loadResources()\n    return this\n  }\n\n  /**\n   * handle disable event\n   * @returns {PlotDraw}\n   */\n  onDisable () {\n    const map = this.getMap()\n    this._activateMapInteractions()\n    this.endDraw()\n    if (this._map) {\n      map.removeLayer(this._getDrawLayer(this.layerName))\n    }\n    return this\n  }\n\n  /**\n   * 结束当前绘制\n   * @param param\n   * @returns {PlotDraw}\n   */\n  endDraw (param = {}) {\n    if (!this._geometry || this._ending) {\n      return this\n    }\n    this._ending = true\n    const geometry = this._geometry\n    this._clearStage()\n    this._geometry = geometry\n    this._fireEvent('drawend', param)\n    delete this._geometry\n    if (this.options['once']) {\n      this.disable()\n    }\n    delete this._ending\n    return this\n  }\n\n  _loadResources () {\n    const symbol = this.getSymbol()\n    const resources = maptalks.Util.getExternalResources(symbol)\n    if (resources.length > 0) {\n      this.drawLayer._getRenderer().loadResources(resources)\n    }\n  }\n\n  /**\n   * Register a new mode for DrawTool\n   * @param name\n   * @param modeAction\n   */\n  static registerMode (name, modeAction) {\n    registeredMode[name.toLowerCase()] = modeAction\n  }\n\n  /**\n   * Get mode actions by mode name\n   * @param  {String} name DrawTool mode name\n   * @return {Object}      mode actions\n   */\n  static getRegisterMode (name) {\n    return registeredMode[name.toLowerCase()]\n  }\n\n  /**\n   * Register modes for DrawTool\n   * @param modes\n   */\n  static registeredModes (modes) {\n    if (modes) {\n      for (let key of Reflect.ownKeys(modes)) {\n        if (!key.match(/^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/)) {\n          let desc = Object.getOwnPropertyDescriptor(modes, key)\n          let _key = key.toLowerCase()\n          Object.defineProperty(registeredMode, _key, desc)\n          console.log(registeredMode)\n        }\n      }\n    }\n  }\n}\n\nPlotDraw.registeredModes(RegisterModes)\n\nexport default PlotDraw\n"],"names":["TextArea","ARC","CURVE","GATHERING_PLACE","POLYLINE","FREE_LINE","POINT","PENNANT","RECTANGLE","CIRCLE","ELLIPSE","LUNE","SECTOR","CLOSED_CURVE","POLYGON","FREE_POLYGON","ATTACK_ARROW","DOUBLE_ARROW","STRAIGHT_ARROW","FINE_ARROW","ASSAULT_DIRECTION","TAILED_ATTACK_ARROW","SQUAD_COMBAT","TAILED_SQUAD_COMBAT","RECTFLAG","TRIANGLEFLAG","CURVEFLAG","BASE_LAYERNAME","Canvas2d","maptalks","options","Curve","_arc","ctx","points","lineOpacity","degree","Math","PI","i","l","length","_arcBetween","_stroke","_quadraticCurve","_path","quadraticCurve","_bezierCurve","bezierCurveTo","x","y","lineTo","_toJSON","toGeoJSON","_paintOn","beginPath","_paintArrow","fromJSON","json","feature","arc","setProperties","registerJSONType","mergeOptions","Coordinate","Polyline","coordinates","type","setCoordinates","_exportGeoJSONGeometry","getCoordinates","toNumberArrays","FreeLine","RegisterModes","PlotTypes","path","geometry","isObject","value","merge","a","b","key","_options","registeredMode","stopPropagation","e","cancelBubble","PlotDraw","$options","_getRegisterMode","layerName","drawLayer","mode","getMode","registerMode","getRegisterMode","Error","setMode","_clearStage","_switchEvents","isEnabled","_deactiveMapInteractions","toLowerCase","map","getMap","_mapDoubleClickZoom","config","action","indexOf","_mapDraggable","_activateMapInteractions","getEvents","Array","isArray","_firstClickHandler","_mouseMoveHandler","_doubleClickHandler","event","coordinate","symbol","getSymbol","_geometry","_clickCoords","setSymbol","_addGeometryToStage","_fireEvent","_historyPointer","slice","push","isInteracting","containerPoint","_getMouseContainerPoint","_isValidContainerPoint","equals","concat","endDraw","mapSize","_map","getSize","w","h","_getDrawLayer","clear","remove","addGeometry","extendSymbol","drawToolLayer","getLayer","addLayer","eventName","param","copy","prototype","call","onAdd","onEnable","_loadResources","onDisable","removeLayer","_ending","disable","resources","getExternalResources","_getRenderer","loadResources","name","modeAction","registeredModes","modes","Reflect","ownKeys","match","desc","Object","getOwnPropertyDescriptor","_key","defineProperty","log"],"mappings":"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"}